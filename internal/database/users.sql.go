// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const addHashPassword = `-- name: AddHashPassword :exec
UPDATE users
SET hashed_password=$1, updated_at = NOW()
WHERE id=$2
`

type AddHashPasswordParams struct {
	HashedPassword string
	ID             uuid.UUID
}

func (q *Queries) AddHashPassword(ctx context.Context, arg AddHashPasswordParams) error {
	_, err := q.db.ExecContext(ctx, addHashPassword, arg.HashedPassword, arg.ID)
	return err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users(id, created_at, updated_at, email)
VALUES(
    gen_random_uuid(),
    NOW(),
    NOW(),
    $1
)
RETURNING id, created_at, updated_at, email, hashed_password
`

func (q *Queries) CreateUser(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
	)
	return i, err
}

const deleteAllUser = `-- name: DeleteAllUser :exec
DELETE FROM users
`

func (q *Queries) DeleteAllUser(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllUser)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, created_at, updated_at, email, hashed_password FROM users
WHERE email=$1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
	)
	return i, err
}

const updateEmailOfUser = `-- name: UpdateEmailOfUser :exec
UPDATE users
SET email=$1, updated_at=NOW()  
WHERE id=$2
`

type UpdateEmailOfUserParams struct {
	Email string
	ID    uuid.UUID
}

func (q *Queries) UpdateEmailOfUser(ctx context.Context, arg UpdateEmailOfUserParams) error {
	_, err := q.db.ExecContext(ctx, updateEmailOfUser, arg.Email, arg.ID)
	return err
}
